
{{- if .Values.global.xgvela.infra_deploy -}}
{{- if and (.Values.global) (.Values.global.xgvela) (.Values.global.xgvela.storage) (.Values.global.xgvela.storage.isProviderXGVela) (.Values.volume.pvenabled)}}
{{- $cnfHdr := (dict "" "") -}}
{{- include "cnfTplHeader_2_9" (dict "cnfHdr" $cnfHdr "dot" . ) -}}
{{- if lt (len .Values.global.xgvela.storage.hostlocalVolumeSelector) (int .Values.container.replica_count) }}
{{- fail "zk:: insufficient pv selector configured" }}
{{- end }}
{{- range $index, $valueset := $cnfHdr.nfVariables.root.Values.global.xgvela.storage.hostlocalVolumeSelector }}
{{- if lt (int $index) (int $cnfHdr.nfVariables.root.Values.container.replica_count) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $cnfHdr.nfVariables.root.Values.volume.name }}-init-{{ $index }}
  namespace: {{ $cnfHdr.nfVariables.nfPrefix }}
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - {key: kubernetes.io/hostname, operator: In, values: [ {{ $valueset }} ]}
              {{- if and ($cnfHdr.nfVariables.root.Values.global) ($cnfHdr.nfVariables.root.Values.global.xgvela) ($cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector) ($cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.enabled) }}
              - {key: {{ $cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.labelKey }}, operator: In, values: [ {{ $cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.labelValue | quote }} ]}
              {{- end }}
      containers:
      - name: pvinit
        image: {{ $cnfHdr.nfVariables.root.Values.global.hub }}/{{ $cnfHdr.nfVariables.root.Values.global.xgvela.storage.xgvelaLocalStoragePVJobImage }}:{{ $cnfHdr.nfVariables.root.Values.global.xgvela.storage.xgvelaLocalStoragePVJobTag }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "mkdir -p /pv-data/{{ $cnfHdr.nfVariables.root.Values.volume.pathprefix }}/vol-{{ $index }}"]
        volumeMounts:
        - name: pv-mnt
          mountPath: /pv-data
      volumes:
      - name: pv-mnt
        hostPath:
          path: {{$cnfHdr.nfVariables.root.Values.global.xgvela.storage.xgvelaLocalStorageHostPathPrefix}}
          type: Directory
      restartPolicy: OnFailure
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ $cnfHdr.nfVariables.root.Values.volume.name }}-{{ $index }}
  namespace: {{ $cnfHdr.nfVariables.nfPrefix }}
  labels:
    zk-vol: "true"
spec:
  capacity:
    storage: {{ $cnfHdr.nfVariables.root.Values.volume.storageCapacity }}
  accessModes:
  - {{ $cnfHdr.nfVariables.root.Values.volume.accessModes }}
  persistentVolumeReclaimPolicy: {{ $cnfHdr.nfVariables.root.Values.volume.reclaimPolicy }}
  storageClassName: {{ $cnfHdr.nfVariables.root.Values.global.xgvela.storage.storageClass }}
  local:
    path: {{$cnfHdr.nfVariables.root.Values.global.xgvela.storage.xgvelaLocalStorageHostPathPrefix}}/{{ $cnfHdr.nfVariables.root.Values.volume.pathprefix }}/vol-{{ $index }}
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - {key: kubernetes.io/hostname, operator: In, values: [ {{ $valueset }} ]}
        {{- if and ($cnfHdr.nfVariables.root.Values.global) ($cnfHdr.nfVariables.root.Values.global.xgvela) ($cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector) ($cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.enabled) }}
        - {key: {{ $cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.labelKey }}, operator: In, values: [ {{ $cnfHdr.nfVariables.root.Values.global.xgvela.infraNodeSelector.labelValue | quote }} ]}
        {{- end }}
  claimRef:
    name: zk-vol-zk-{{ $index }}
    namespace: {{ $cnfHdr.nfVariables.nfPrefix }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
